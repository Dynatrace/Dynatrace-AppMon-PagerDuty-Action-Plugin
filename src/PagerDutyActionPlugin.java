
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

import com.dynatrace.diagnostics.pdk.*;

import java.util.Collection;
import java.util.logging.Logger;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class PagerDutyActionPlugin implements Action {

	//CREATE INSTANCE OF LOGGER
	private static final Logger log = Logger.getLogger(PagerDutyActionPlugin.class.getName());
	
	//SET TCP READ TIMEOUT IN MS
	private static final int readTimeOut = 20000;
	
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		
		//RUN CONNECTIVITY CHECK
		
		//SET URL FROM USER INPUT FIELD
		URL url = env.getConfigUrl("url");
		//SET TCP TIMEOUT FROM USER INPUT FIELD
		int timeout = env.getConfigDouble("timeout").intValue();
		
		//OPEN URL CONNECTION AND SET TIMEOUTS - USES CONNECTION METHOD 'GET'
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setConnectTimeout(timeout);
		con.setReadTimeout(readTimeOut);
		
		//DO LOG
		log.fine("Checking connectivity...");
		log.fine("Sending 'GET' request to URL : " + url);
		
		
		//TRY TO GET RESPONSE 
		try{
			int responseCode = con.getResponseCode();
			log.fine("Response Code : " + responseCode);
		}
		
		//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
		catch (IOException e) {
			log.severe("Unable to connect to " + url);
			log.severe(e.toString());
			return new Status (Status.StatusCode.ErrorInternalException);
		}
		
		//DISCONNECT
		finally{
			con.disconnect();
		}
		
		return new Status(Status.StatusCode.Success);
	}

	@Override
	public Status execute(ActionEnvironment env) throws Exception {
		
		//MAP ALL INCIDENTS A COLLECTION
		Collection<Incident> incidents = env.getIncidents();
		
		//FOR EACH INCIDENT
		for (Incident incident : incidents) {
			
			//LOG INCIDENT MESSAGE
			String message = incident.getMessage();
			log.fine("Incident " + message + " triggered.");
			
			//SET URL FROM USER INPUT FIELD
			URL url = env.getConfigUrl("url");
			//SET TCP TIMEOUT FROM USER INPUT FIELD
			int timeout = env.getConfigDouble("timeout").intValue();
			//SET PAGERDUTY API KEY FROM USER INPUT FIELD
			String apikey = env.getConfigString("key");
			
			//OPEN URL CONNECTION AND SET TIMEOUTS - USES CONNECTION METHOD 'POST'
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setRequestMethod("POST");
			con.setConnectTimeout(timeout);
			con.setReadTimeout(readTimeOut);
			
			//SET VARIABLES
			OutputStream out;
			InputStream in;
			int responseCode;
			String responseBody;
			
			//LOG API KEY USED
			log.fine("Using API KEY - " + apikey);
			
			//JSON CREATION
			JSONObject jsonObj = new JSONObject();
			
			jsonObj.put("service_key", apikey);
			jsonObj.put("event_type", "trigger");
			jsonObj.put("description", incident.getMessage());
			jsonObj.put("client", "dynaTrace");
			jsonObj.put("client_url", incident.getServerName());
			
			//JSON CREATION FOR 'DETAILS'
			JSONObject jsonObj2 = new JSONObject();
			jsonObj2.put("Severity", incident.getSeverity().toString());
			jsonObj2.put("Incident Rule", incident.getIncidentRule().getName());
			
			for (Violation violation : incident.getViolations()) {
				jsonObj2.put("Violation", violation.getViolatedMeasure().getName() + " violated threshold");
				log.fine("Measure " + violation.getViolatedMeasure().getName() + " violoated threshold.");
			}
			
			//APPEND DETAILS JSON TO ORIGINAL JSON
			jsonObj.put("details", jsonObj2);
			
			//JSON TO STRING
			String jsonString = jsonObj.toJSONString();
			
			//LOG JSON STRING
			log.fine("JSON String is: " + jsonString);
			
			//JSON STRING TO BYTES
			byte[] payload = jsonString.getBytes();
			
			//SET CONNECTION OUTPUT
			con.setFixedLengthStreamingMode(payload.length);
			con.setDoOutput(true);
			
			//LOG PROGRESS
			log.fine("Trying to get output stream...");
			
			//TRY TO GET OUTPUT STREAM
			try{
				out = con.getOutputStream();
			}
			
			//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
			catch (IOException e){
				log.severe("Exception thrown whilst getting output stream...");
				log.severe(e.toString());
				con.disconnect();
				return new Status (Status.StatusCode.ErrorInternalException);
			}
			
			//LOG PROGRESS
			log.fine("Trying to write to output stream");
			
			//TRY TO SEND PAYLOAD
			try{
				out.write(payload);
				out.close();
			}
			
			//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
			catch (IOException e) {
				log.severe("Exception thrown whilst writing to output stream...");
				log.severe(e.toString());
				con.disconnect();
				return new Status (Status.StatusCode.ErrorInternalException);
			}
			
			//LOG PROGRESS
			log.fine("Trying to connect...");
			
			//TRY TO GET RESPONSE CODE
			try{
				responseCode = con.getResponseCode();
				log.fine("Response Code : " + responseCode);
			}
			
			//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
			catch (IOException e) {
				log.severe("Exception thrown whilst writing to output stream...");
				log.severe(e.toString());
				con.disconnect();
				return new Status (Status.StatusCode.ErrorInternalException);
			}

			//TRY TO GET INPUT STREAM
			try{
				if(responseCode == 200){
					in = con.getInputStream();
				}
				else{
					in = con.getErrorStream();
				}
				
				BufferedReader bufferReader = new BufferedReader(new InputStreamReader(in));
			    responseBody = bufferReader.readLine();
			    bufferReader.close();
			    if(responseCode != 200){
			    	log.warning("Response code was: " + responseCode);
			    	log.warning("Error received from PagerDuty: " + responseBody);
			    }
			}
			
			//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
			catch (IOException e) {
				log.severe("Exception thrown whilst reading from input stream...");
				log.severe(e.toString());
				return new Status (Status.StatusCode.ErrorInternalException);
			}
			
			//DISCONNECT
			finally{
				con.disconnect();
			}
			
			//CREATE INSTANCE OF JSON PARSER
			JSONParser parser = new JSONParser();
			 
			//TRY TO PARSE JSON RECEIVED
			try {
				Object obj = parser.parse(responseBody);
				JSONObject jsonResponse = (JSONObject) obj;
				if(responseCode == 200){
					log.fine("Status: " + jsonResponse.get("status").toString());
					log.fine("Message: " + jsonResponse.get("message").toString());
					log.fine("Incident Key: " + jsonResponse.get("incident_key").toString());
					log.info("Successfully forwarded incident to PagerDuty for incident: " + incident.getMessage() + ". The incident key is: " + jsonResponse.get("incident_key").toString());
				}
			}
			
			//CATCH EXCEPTION, LOG IT THEN SEND RESPONSE ERROR CODE
			catch (ParseException e) {
				log.severe("Exception thrown whilst parsing JSON...");
				log.severe(e.toString());
				return new Status (Status.StatusCode.PartialSuccess);
			}
			
		}
		
		//RETURN SUCCESS
		return new Status(Status.StatusCode.Success);
	}
	
	@Override
	public void teardown(ActionEnvironment env) throws Exception {
	}
}